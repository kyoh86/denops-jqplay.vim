*jqplay.txt* 'jq'をVim/Neovimでインタラクティブに実行する
                                                  *jqplay* *denops-jqplay.jax*

Author: kyoh86 <me@kyoh86.dev>
License: MIT License


==============================================================================
                                                             *jqplay-contents*
目次 ~

インストール                                                |jqplay-install|
初期設定                                                    |jqplay-setup|
基本的な使い方                                              |jqplay-usage|
関数                                                        |jqplay-function|
コマンド                                                    |jqplay-commands|
オプション                                                  |jqplay-options|


==============================================================================
                                                              *jqplay-install*
インストール ~

依存するプラグインとして |denops.vim| をインストールしてください。
また、外部依存として'jq'コマンドのインストールが必要です。

* vim-denops/denops.vim https://github.com/vim-denops/denops.vim
* jqlang/jq https://jqlang.github.io/jq/

また、jqのクエリを快適に書くために、各種のsyntaxなどを提供するプラグイン
などを適宜インストールすることをお勧めします。

* vito-c/jq.vim https://github.com/vito-c/jq.vim
* bfrg/vim-jq https://github.com/bfrg/vim-jq
* jq-lsp https://github.com/wader/jq-lsp


==============================================================================
                                                                *jqplay-setup*
初期設定 ~

|jqplay#set_params()| 関数を使用してください。


==============================================================================
                                                                *jqplay-usage*
基本的な使い方 ~

|jqplay#buffer()|、|jqplay#file()|、|jqplay#empty()|、|:JqplayBuffer|、
|:JqplayFile|または|:JqplayEmpty|を使用して、jqplayを開始します。

開いたウィンドウに、jqのフィルタを入力してください。
|:write|で保存すると、フィルタ結果が新しいウィンドウに表示されます。

フィルタの内容を書き換えて、再度 |:write| で保存することで、結果が
更新されます。


==============================================================================
                                                             *jqplay-function*
関数 ~

                                                         *jqplay#set_params()*
jqplay#set_params({opts})

    この関数で、他の各関数の引数のデフォルト値を設定することができます。
    提供しているコマンド類も、それぞれ対応する関数を呼んでいるため、
    すべてのオプションはこの関数で調整します。

    {opts} は関数名をキー、渡すオプションを値に持つ辞書です。

    例えば、jqplay#file({opts}) 関数に対して、以下のように設定できます。 >vim
        call jqplay#setup({ "file": { "split": "above" } })
<

    このように設定すると、 |jqplay#file()| 関数の呼び出しで "split" オプション
    に "above" が渡されます。

    ここで設定した値は、関数の呼び出し時に新しい値で上書きできます。 >vim
        call jqplay#setup({ "file": { "split": "above" } })

        call jqplay#file()
            -- "split" は "above" として処理される

        call jqplay#file({ "split": "none" })
            -- "split" は "none" として処理される
<

    すべての関数に対して設定を行う必要はありません。設定しない場合はデフォルト
    値が使用されます。
    また、関数名に`_`を指定して、すべての関数を横断して設定できます。 >vim
        call jqplay#setup({ "_": {
            \ "split": "above",
            \ "jq-bin": "/usr/bin/jq" } })
<

                                                             *jqplay#buffer()*
jqplay#buffer({opt})

    対象となるJSONデータを含むバッファを指定してjqplayを開始します。

    {opt} は以下のようなフィールドを持つ辞書です。

                                               *jqplay#buffer()-option-bufnr*
        {bufnr} : 数値
            JSONデータを含むバッファのバッファ番号を指定します。
            デフォルト: 0（現在のバッファ）

                                              *jqplay#buffer()-option-bufname*
        {bufname} : 文字列
            JSONデータを含むバッファのバッファ名を指定します。
            デフォルト: ""（bufnrを使用する）

                                                *jqplay#buffer()-option-split*
        {split} : 文字列
            新しく開くバッファウィンドウの分割方法を指定します。
            デフォルト: "none"
            参照: |jqplay-option-split|

                                                *jqplay#buffer()-option-reuse*
        {reuse} : 真偽値 (0/1)
            出力用のバッファが既にいずれかのウインドウに開かれているとき、
            フォーカスを合わせるだけで新しいウインドウを開きません。
            デフォルト: v:false

                                                 *jqplay#buffer()-option-lnum*
        {lnum}: 数値または"$"
            JSONデータを含むバッファの行の先頭を指定します。
            デフォルト: 1

                                                  *jqplay#buffer()-option-end*
        {end}: 数値または"$"
            JSONデータを含むバッファの行の末尾を指定します。
            デフォルト: "$"

        他にjqのオプションを指定することができます。
        |jqplay-option-jq-params| を参照してください。

                                                               *jqplay#file()*
jqplay#file({opt})

    対象となるJSONファイルを指定してjqplayを開始します。

    {opt} は以下のようなフィールドを持つ辞書です。

                                                 *jqplay#file()-option-source*
        {source} : 文字列 (必須)
            JSONファイルのパスを指定します。

                                                  *jqplay#file()-option-split*
        {split} : 文字列
            新しく開くバッファウィンドウの分割方法を指定します。
            デフォルト: "none"
            参照: |jqplay-option-split|

                                                  *jqplay#file()-option-reuse*
        {reuse} : 真偽値 (0/1)
            出力用のバッファが既にいずれかのウインドウに開かれているとき、
            フォーカスを合わせるだけで新しいウインドウを開きません。
            デフォルト: v:false

        他にjqのオプションを指定することができます。
        |jqplay-option-jq-params| を参照してください。

                                                               *jqplay#empty()*
jqplay#empty({opt})

    入力なしでjqplayを開始します。

    {opt} は以下のようなフィールドを持つ辞書です。

                                                 *jqplay#empty()-option-split*
        {split} : 文字列
            新しく開くバッファウィンドウの分割方法を指定します。
            デフォルト: "none"
            参照: |jqplay-option-split|

                                                 *jqplay#empty()-option-reuse*
        {reuse} : 真偽値 (0/1)
            出力用のバッファが既にいずれかのウインドウに開かれているとき、
            フォーカスを合わせるだけで新しいウインドウを開きません。
            デフォルト: v:false

        他にjqのオプションを指定することができます。
        |jqplay-option-jq-params| を参照してください。

==============================================================================
                                                             *jqplay-commands*
コマンド ~

                                                               *:JqplayBuffer*
:[range]JqplayBuffer [{flags}]

    |jqplay#buffer()|を呼び出します。
    指定したバッファの[range]の中の行がソースとして指定されます。
    {flags}には以下を指定できます

        --bufnr={bufnr} : 数値
            JSONデータを含むバッファのバッファ番号を指定します。
            デフォルト: 0（現在のバッファ）

        --bufname={bufname} : 文字列
            JSONデータを含むバッファのバッファ名を指定します。
            デフォルト: ""（bufnrを使用する）

        --split={direction} : 文字列
            新しく開くバッファウィンドウの分割方法を指定します。
            デフォルト: "none"
            参照: |jqplay-option-split|

        --reuse={reuse} : 真偽値 (0/1)
            出力用のバッファが既にいずれかのウインドウに開かれているとき、
            フォーカスを合わせるだけで新しいウインドウを開きません。
            デフォルト: v:false

        他にjqのフラグを指定することができます。
        |jqplay-option-jq-flags| を参照してください。

                                                                *:JqplayFile*
:JqplayFile [{flags}] {file}

    |jqplay#file()|を呼び出します。
    {file}に指定したファイルがソースとして指定されます。
    {flags}には以下を指定できます

        --split={direction} : 文字列
            新しく開くバッファウィンドウの分割方法を指定します。
            デフォルト: "none"
            参照: |jqplay-option-split|

        --reuse={reuse} : 真偽値 (0/1)
            出力用のバッファが既にいずれかのウインドウに開かれているとき、
            フォーカスを合わせるだけで新しいウインドウを開きません。
            デフォルト: v:false

        他にjqのフラグを指定することができます。
        |jqplay-option-jq-flags| を参照してください。

                                                                 *:JqplayEmpty*
:JqplayEmpty [{flags}]

    |jqplay#buffer()|を呼び出します。入力データはないものとします。
    {flags}には以下を指定できます

        --split={direction} : 文字列
            新しく開くバッファウィンドウの分割方法を指定します。
            デフォルト: "none"
            参照: |jqplay-option-split|

        --reuse={reuse} : 真偽値 (0/1)
            出力用のバッファが既にいずれかのウインドウに開かれているとき、
            フォーカスを合わせるだけで新しいウインドウを開きません。
            デフォルト: v:false

        他にjqのフラグを指定することができます。
        |jqplay-option-jq-flags| を参照してください。


==============================================================================
                                                              *jqplay-options*
オプション ~

各関数、各コマンドで指定するオプションの値の詳細は以下の通りです。

                                                         *jqplay-option-split*
split : 文字列
    新しく開くバッファウィンドウの分割方法として、以下のいずれかを
    指定します。

    - "none"       : 分割せず現在のウインドウに表示
    - "top"        : 一番上に分割
    - "above"      : 現在のウインドウの上に分割
    - "below"      : 現在のウインドウの下に分割
    - "bottom"     : 一番下に分割
    - "leftmost"   : 一番左に分割
    - "left"       : 現在のウインドウの左に分割
    - "right"      : 現在のウインドウの右に分割
    - "rightmost"  : 一番右に分割
    - "tab"        : 新しいタブページを作成

                                                     *jqplay-option-jq-params*

jqのオプションとして以下のフィールドを指定することができます。
    {jq-raw-input} : v:true
        入力をJSONではなくそのままの文字列として扱います。
        デフォルト: v:false

    {jq-slurp} : v:true
        入力を単一の配列として扱います。
        デフォルト: v:false

    {jq-compact-output} : v:true
        出力をコンパクトな形式で表示します。
        デフォルト: v:false

    {jq-raw-output} : v:true
        出力をJSONではなくそのままの文字列として表示します。
        デフォルト: v:false

    {jq-join-output} : v:true
        出力をJSONではなくそのままの文字列として表示しつつ、それぞれの出力を
        改行で区切りません。
        デフォルト: v:false

    {jq-ascii-output} : v:true
        出力をASCII文字のみで表示します。
        ASCII文字以外の文字はエスケープされます。
        デフォルト: v:false

    {jq-sort-keys} : v:true
        出力のキーをソートします。
        デフォルト: v:false

    {jq-tab} : v:true
        出力のインデントをタブ文字で行います。
        デフォルト: v:false

    {jq-indent} : 数値
        出力のインデントを指定した数のスペースで行います。
        デフォルト: 2; 最大値: 7

    {jq-stream} : v:true
        入力をストリーミング形式でパースします。
        デフォルト: v:false

    {jq-stream-errors} : v:true
        入力をストリーミング形式でパースして、エラーは配列形式で出力します。
        デフォルト: v:false

    {jq-seq} : v:true
        入力を application/json-seq 形式でパースし、 application/json-seq
        形式で出力します。
        デフォルト: v:false

    {jq-arg} : 辞書
        {"name": "value"} 形式の辞書を指定することで、クエリ中で $name
        として参照できる文字列変数を定義します。
        例えば、`{"name": "value"}` と指定することで、クエリ中で `$name`
        として `"value"` を参照できます。

    {jq-argjson} : 辞書
        {"name": "{\"x\":1}"} 形式の文字列の配列で指定することで、クエリ中で
        $name として参照できるJSON変数を定義します。
        例えば、`{"name": "{\"x\":1}"}` と指定することで、クエリ中で `$name`
        として `{"x":1}` を参照できます。

    {jq-slurpfile} : 辞書
        {"name": "path"} 形式の辞書を指定することで、指定されたファイルを
        読み込んで、ファイルの各行を配列として $name として参照できる変数を
        定義します。
        例えば、`{"name": "path"}` と指定することで、ファイルの各行を配列とし
        て `$name` で参照できます。

    {jq-rawfile} : 辞書
        {"name": "path"} 形式の辞書を指定することで、指定されたファイルを
        読み込んで、ファイルの中身を文字列として $name として参照できる変数を
        定義します。
        例えば、`{"name": "path"}` と指定することで、ファイルの中身を文字列と
        して `$name` で参照できます。

    {jq-cwd} : 文字列
        jqの実行時のカレントディレクトリを指定します。jq-slurpfile などで
        相対パスを指定する場合に使用します。指定しない場合は、Vimのカレント
        ディレクトリが使用されます。
        参考: |getcwd()|

    {jq-bin} : 文字列
        jqの実行ファイルのパスを指定します。デフォルトは "jq" です。

                                                     *jqplay-option-jq-flags*

コマンドにjqのためのフラグとして以下のフィールドを指定することができます。
    --jq-raw-input
        入力の各行をJSONではなくそのままの文字列として扱います。

    --jq-slurp
        入力を単一の配列として扱います。

    --jq-compact-output
        出力をコンパクトな形式で表示します。

    --jq-raw-output
        出力をJSONではなくそのままの文字列として表示します。

    --jq-join-output
        出力をJSONではなくそのままの文字列として表示しつつ、それぞれの出力を
        改行で区切りません。

    --jq-ascii-output
        出力をASCII文字のみで表示します。
        ASCII文字以外の文字はエスケープされます。

    --jq-sort-keys
        出力のキーをソートします。

    --jq-tab
        出力のインデントをタブ文字で行います。

    --jq-indent {n}
        出力のインデントを指定した数のスペースで行います。
        デフォルト: 2; 最大値: 7

    --jq-stream
        入力をストリーミング形式でパースします。

    --jq-stream-errors
        入力をストリーミング形式でパースして、エラーは配列形式で出力します。

    --jq-seq
        入力を application/json-seq 形式でパースし、 application/json-seq
        形式で出力します。

    --jq-arg {arg} : 複数指定可能
        `name=value` 形式で指定することで、クエリ中で $name として参照できる
        変数を定義します。

    --jq-argjson {arg-json} : 複数指定可能
        `name={"x":1}` 形式で指定することで、クエリ中で $name として参照できる
        JSON変数を定義します。

    --jq-slurpfile {slurp-file} : 複数指定可能
        `name=path` 形式の辞書を指定することで、指定されたファイルを読み込み、
        ファイルの各行を配列として $name として参照できる変数を定義します。

    --jq-rawfile {raw-file} : 複数指定可能
        `name=path` 形式の辞書を指定することで、指定されたファイルを読み込み、
        ファイルの中身を文字列として $name として参照できる変数を定義します。

    --jq-cwd {path}
        jqの実行時のカレントディレクトリを指定します。jq-slurpfile などで
        相対パスを指定する場合に使用します。

    --jq-bin {path}
        jqの実行ファイルのパスを指定します。デフォルトは "jq" です。


==============================================================================
" vim:tw=78:ts=4:sw=4:sts=4:et:ft=help:norl:noet:fen:
